plugins {
    id("com.gradleup.shadow") version "8.3.6"
}

dependencies {
    implementation project(':util')
    implementation project(':resolver')
    implementation project(':catalog')
    implementation project(':regex')
    implementation project(':datatype')
    implementation project(':xsd-datatype')
    implementation project(':rng-parse')
    implementation project(':dtd-parse')
    implementation project(':infer')
    implementation project(':rng-schema')
    implementation project(':convert-from-xml')
    implementation project(':convert-to-xsd')
    implementation project(':convert-from-dtd')
    implementation project(':convert-to-dtd')
    implementation group: 'xml-resolver', name: 'xml-resolver', version: '1.2'
}

sourceSets {
    main {
        java {
            srcDir 'src/main'
        }
        resources {
            srcDir "build/generated/sources/resources/main"
        }
    }
    test {
        java {
            srcDir 'src/test'
        }
    }
}

jar {
    manifest {
        attributes(
                'Main-Class': 'com/thaiopensource/relaxng/translate/Driver',
                'Class-Path': 'resolver.jar')
    }
}

shadowJar {
    archiveFileName = "${project.name}.jar"
//    archiveBaseName = project.name
//    archiveClassifier = ''
//    archiveVersion = rootProject.version
    configurations = [project.configurations.runtimeClasspath]

    from(project(':util').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':resolver').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':catalog').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':regex').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':datatype').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':xsd-datatype').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':rng-parse').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':dtd-parse').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':infer').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':rng-schema').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':convert-from-xml').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':convert-to-xsd').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':convert-from-dtd').sourceSets.main.output) { exclude('META-INF/services/*') }
    from(project(':convert-to-dtd').sourceSets.main.output) { exclude('META-INF/services/*') }

    dependencies {
        exclude(dependency('.*:.*'))
    }
}
tasks.build.dependsOn tasks.named('shadowJar')

jar {
    enabled = false
}

tasks.register('generateVersion') {
    def propertyFile = file("${buildDir}/generated/sources/resources/main/com/thaiopensource/relaxng/translate/resources/Version.properties")

    outputs.files propertyFile

    doLast {
        propertyFile.parentFile.mkdirs()
        propertyFile.text = "version=${project.version}"
    }
}
processResources.dependsOn tasks.named("generateVersion")

tasks.register('generateServices') {
    def services = [
            'com.thaiopensource.datatype.xsd.regex.RegexEngine': [
                    'com.thaiopensource.datatype.xsd.regex.xerces2.RegexEngineImpl',
                    'com.thaiopensource.datatype.xsd.regex.java.RegexEngineImpl'
            ],
            'org.relaxng.datatype.DatatypeLibraryFactory'      : [
                    'com.thaiopensource.datatype.xsd.DatatypeLibraryFactoryImpl'
            ],
    ]

    outputs.files services.collect { entry -> file("${buildDir}/generated/sources/resources/main/META-INF/services/${entry.key}") }

    doLast {
        services.each { entry ->
            {
                def serviceFile = file("${buildDir}/generated/sources/resources/main/META-INF/services/${entry.key}")
                serviceFile.parentFile.mkdirs()
                serviceFile.text = entry.value.join('\n')
            }
        }
    }
}
processResources.dependsOn tasks.named("generateServices")

tasks.register('dist', Zip) {
    dependsOn(tasks.named('shadowJar'))
    archiveFileName = "${file(distsDirectory)}/${project.name}-${project.version}.zip"
    from(tasks.shadowJar)
    from('../../trang/doc/trang-manual.html') {
        filter { it.replace('@VERSION@', project.version) }
    }
    from '../../copying.txt'
}
assemble.dependsOn(tasks.named('dist'))
